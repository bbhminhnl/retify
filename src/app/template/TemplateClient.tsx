"use client";

import { useEffect, useState } from "react";

import { set } from "lodash";

export default function TemplateClient({
  template_id,
  rawData,
}: {
  template_id: string;
  rawData: any;
}) {
  /** Data  D·ªØ li·ªáu hi·ªÉn th·ªã*/
  const [data, setData] = useState<any[]>([]);
  /** Error */
  const [error, setError] = useState<string | null>(null);

  /**
   * setLoading
   */
  const [loading, setLoading] = useState<boolean>(false);
  /** Th√™m ·∫£nh m√¥ t·∫£ cho s·∫£n ph·∫©m
   * @param menuItems Danh s√°ch c√°c m√≥n ƒÉn ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch v√† t√°ch t√™n, gi√°, ƒë∆°n v·ªã
   * @returns Danh s√°ch c√°c m√≥n ƒÉn ƒë√£ ƒë∆∞·ª£c th√™m ·∫£nh m√¥ t·∫£
   * @description
   * - G·ªçi API ƒë·ªÉ t·∫°o ·∫£nh t·ª´ prompt
   * - L∆∞u ·∫£nh v√†o server
   * - Tr·∫£ v·ªÅ danh s√°ch c√°c m√≥n ƒÉn ƒë√£ ƒë∆∞·ª£c th√™m ·∫£nh m√¥ t·∫£
   * - N·∫øu c√≥ l·ªói trong qu√° tr√¨nh t·∫°o ·∫£nh, tr·∫£ v·ªÅ null cho ·∫£nh
   */
  const addImageDescription = async (menuItems: any[]) => {
    /** Call api t·∫°o ·∫£nh minh ho·∫° cho m√≥n ƒÉn */
    const UPDATED_MENU = await Promise.all(
      menuItems.map(async (item: any) => {
        try {
          /**
           * G·ªçi API ƒë·ªÉ t·∫°o ·∫£nh t·ª´ prompt
           */
          const RES = await fetch(`/api/google-generate-img`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ prompt: item.name }),
          });
          /**
           * K·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ API t·∫°o ·∫£nh
           */
          const DATA = await RES.json();

          // const imageUrl = await saveImageToServer(data?.image);
          /**
           * G·ªçi API ƒë·ªÉ l∆∞u ·∫£nh
           * @param base64Image Lu·ªìng base64 c·ªßa ·∫£nh
           * @returns {string} - ƒê∆∞·ªùng d·∫´n ·∫£nh ƒë√£ l∆∞u
           */
          const IMG_URL = await fetchUploadImage(DATA?.image);
          /**
           * H√†m x·ª≠ l√Ω upload ·∫£nh l√™n server
           * @param base64Image Lu·ªìng base64 c·ªßa ·∫£nh
           * @returns {string} - ƒê∆∞·ªùng d·∫´n ·∫£nh ƒë√£ l∆∞u
           */

          /** Tr·∫£ v·ªÅ item v√† th√™m image_url */
          return { ...item, image_url: IMG_URL };
        } catch (error) {
          console.error("Error generating image:", error);
          return { ...item, image_url: null };
        } finally {
          // completed++;
          // setProgress(`${completed}/${totalItems}`);
          // if (completed === totalItems) {
          //   setProgress("Done");
          //   setTimeout(() => {
          //     setProgress(null);
          //   }, 2000);
          // }
        }
      })
    );
    return UPDATED_MENU;
  };
  /**
   * H√†m x·ª≠ l√Ω upload ·∫£nh l√™n server
   * @param base64Image Lu·ªìng base64 c·ªßa ·∫£nh
   * @returns {string} - ƒê∆∞·ªùng d·∫´n ·∫£nh ƒë√£ l∆∞u
   */
  const fetchUploadImage = async (base64Image: string) => {
    try {
      /** Gi·∫£ ƒë·ªãnh ƒë√¢y l√† ·∫£nh PNG, b·∫°n c√≥ th·ªÉ ƒë·ªïi th√†nh "image/jpeg" n·∫øu c·∫ßn */
      const MIME_TYPE = "image/png";

      /** Convert base64 ‚Üí binary ‚Üí File */
      const BYTE_STRING = atob(base64Image);
      /**
       * Chuy·ªÉn ƒë·ªïi base64 th√†nh Uint8Array
       */
      const BYTE_ARRAY = new Uint8Array(BYTE_STRING.length);
      /**
       * Chuy·ªÉn ƒë·ªïi base64 th√†nh Uint8Array
       */
      for (let i = 0; i < BYTE_STRING.length; i++) {
        BYTE_ARRAY[i] = BYTE_STRING.charCodeAt(i);
      }
      /**
       * T·∫°o ƒë·ªëi t∆∞·ª£ng File t·ª´ Uint8Array
       */
      const FILE = new File([BYTE_ARRAY], "image.png", {
        type: MIME_TYPE,
      });

      /** ƒê∆∞a v√†o FormData */
      const FORM_DATA = new FormData();
      /** ƒë·ªïi 'file' n·∫øu API c·∫ßn t√™n kh√°c */
      FORM_DATA.append("file", FILE);
      /**
       * G·ªçi API ƒë·ªÉ upload ·∫£nh
       */
      const RES = await fetch(
        "https://api.merchant.vn/v1/internals/attachment/upload?path=&label=&folder_id=&root_file_id=",
        {
          method: "POST",
          body: FORM_DATA,
          headers: {
            "token-business":
              process.env.NEXT_PUBLIC_MERCHANT_TOKEN_BUSINESS || "",
          },
        }
      );
      /**
       * K·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ API d·∫°ng JSON
       */
      const RESULT = await RES.json();
      /**
       * URL ·∫£nh
       */
      const FILE_PATH = RESULT?.data?.file_path || "";
      console.log(RESULT);
      /**
       * Tra ve URL ·∫£nh
       */
      return FILE_PATH;
    } catch (error) {
      console.error("Upload failed:", error);
    }
  };

  useEffect(() => {
    const fetchData = async () => {
      if (!rawData) {
        setError("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ho·∫∑c d·ªØ li·ªáu ƒë√£ qu√° h·∫°n.");
        return;
      }

      try {
        setLoading(true);
        /**
         * Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ Redis v·ªÅ ƒë·ªãnh d·∫°ng JSON
         */
        // const PARSED_DATA = JSON.parse(rawData);
        const PARSED_DATA = rawData;

        console.log(rawData, "rawData");
        /** Ki·ªÉm tra n·∫øu t·∫•t c·∫£ ph·∫ßn t·ª≠ ƒë·ªÅu c√≥ image_url */
        const HAS_IMAGE_URL = PARSED_DATA.every(
          (item: any) => !!item.image_url
        );
        /** L∆∞u gi√° tr·ªã menu */
        let updated_menu = PARSED_DATA;
        /** N·∫øu kh√¥ng c√≥ image_url th√¨ g·ªçi API ƒë·ªÉ t·∫°o ·∫£nh */
        if (!HAS_IMAGE_URL) {
          /** N·∫øu thi·∫øu image_url, generate */
          updated_menu = await addImageDescription(PARSED_DATA);
          console.log(updated_menu, "UPDATED_MENU");
        } else {
          console.log("‚úÖ D·ªØ li·ªáu ƒë√£ c√≥ image_url, kh√¥ng c·∫ßn generate.");
        }

        setData(updated_menu);

        /** L∆∞u l·∫°i Redis */
        const RES = await fetch("/api/json", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            key: template_id, // ‚ö†Ô∏è thay b·∫±ng id th·ª±c t·∫ø n·∫øu c·∫ßn
            value: updated_menu,
          }),
        });
        console.log(RES, "RES");
      } catch (err: any) {
        setError("D·ªØ li·ªáu b·ªã l·ªói ho·∫∑c kh√¥ng th·ªÉ t·∫°o ·∫£nh.");
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [rawData]);

  return (
    <main className="p-8 max-w-3xl mx-auto space-y-6">
      <h1 className="text-2xl font-bold">üì¶ D·ªØ li·ªáu template</h1>

      {error ? (
        <div className="p-4 bg-yellow-100 text-yellow-800 rounded">
          ‚ö†Ô∏è {error}
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          {loading && (
            <div className="p-4 bg-gray-100 text-gray-500 rounded">
              <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>
            </div>
          )}
          {!loading &&
            (data && data.length > 0 ? (
              data.map((item, index) => (
                <div key={index} className="bg-white p-4 rounded shadow-md">
                  <img
                    src={item.image_url}
                    alt={item.name}
                    className="w-full h-48 object-cover rounded"
                  />
                  <h2 className="text-xl font-semibold mt-4 truncate">
                    {item.name}
                  </h2>
                  <p className="text-gray-500">
                    {item.price} {item.unit}
                  </p>
                </div>
              ))
            ) : (
              <div className="p-4 text-gray-500">D·ªØ li·ªáu tr·ªëng.</div>
            ))}
        </div>
      )}
    </main>
  );
}
